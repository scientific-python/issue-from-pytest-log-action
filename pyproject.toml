[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "issue-from-pytest-log-action"
version = "0.1.0"
description = "GitHub Action for bisection analysis of pytest failures with package version tracking"
authors = [{ name = "Ian Hunt-Isaak", email = "ianhuntisaak@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dependencies = [
  "setuptools; python_version >= '3.12'", # For pkg_resources fallback
]

[project.optional-dependencies]
test = [
  "pytest>=6.0",
  "pytest-cov",
]
dev = [
  "ruff",
  "mypy",
  "pre-commit",
]

[project.scripts]
capture-versions = "issue_from_pytest_log_action.capture_versions:main"
simple-bisect = "issue_from_pytest_log_action.simple_bisect:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["issue_from_pytest_log_action*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short"

[tool.ruff]
target-version = "py310"
builtins = ["ellipsis"]
exclude = [
  ".git",
  ".eggs",
  "build",
  "dist",
  "__pycache__",
]
line-length = 100

[tool.ruff.lint]
# E402: module level import not at top of file
# E501: line too long - let black worry about that
# E731: do not assign a lambda expression, use a def
ignore = [
  "E402",
  "E501",
  "E731",
]
select = [
  "F",   # Pyflakes
  "E",   # Pycodestyle
  "I",   # isort
  "UP",  # Pyupgrade
  "TID", # flake8-tidy-imports
  "W",
]
extend-safe-fixes = [
  "TID252", # absolute imports
]
fixable = ["I", "TID252"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING"]
