name: Create Issue From pytest log
description: >-
  Create an issue for failed tests from a pytest-reportlog file.
inputs:
  log-path:
    description: >-
      The path to the log file
    required: true
  issue-title:
    description: >-
      Title of issue being created or updated. Can be a parametrized string, in which case
      a new issue will be opened for all variations.
    required: false
    default: "⚠️ Nightly upstream-dev CI failed ⚠️"
  issue-label:
    description: >-
      Labels to apply to issue
    required: false
    default: "CI"
  assignees:
    description: >-
      Comma-separated users to assign to the issue (no spaces). All assigned users have to
      have commit rights.
    required: false
    default: ""
outputs: {}
branding:
  color: "red"
  icon: "alert-triangle"

runs:
  using: composite
  # TODO: learn enough javascript / node.js to write the reportlog parsing
  steps:
    - name: print environment information
      shell: bash -l {0}
      run: |
        python --version
        python -m pip list
    - name: install dependencies
      shell: bash -l {0}
      run: |
        python -m pip install pytest more-itertools
    - name: produce the issue body
      shell: bash -l {0}
      run: |
        python $GITHUB_ACTION_PATH/parse_logs.py ${{ inputs.log-path }}
    - name: create the issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          const pytest_logs = fs.readFileSync('pytest-logs.txt', 'utf8');
          const title = "${{ inputs.issue-title }}";
          const assignees = "${{inputs.assignees}}".split(",");
          const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
          const issue_body = `[Workflow Run URL](${workflow_url})\n${pytest_logs}`;

          // Run GraphQL query against GitHub API to find the most recent open issue used for reporting failures
          const query = `query($value:String!) {
            search(query: $value, type:ISSUE, first: 1) {
              edges {
                node {
                  ... on Issue {
                    body
                    id
                    number
                  }
                }
              }
            }
          }`;
          const owner = context.repo.owner;
          const name = context.repo.repo;
          const label = "${{ inputs.issue-label }}";
          const creator = "app/github-actions";

          const variables = {
            value: `repo:${owner}/${name} author:${creator} label:${label} is:open in:title ${title}`
          }
          const result = await github.graphql(query, variables)

          // If no issue is open, create a new issue,
          // else update the body of the existing issue.
          if (result.search.edges.length === 0) {
            github.rest.issues.create({
              owner: owner,
              repo: name,
              body: issue_body,
              title: title,
              labels: [label],
              assignees: assignees
            })
          } else {
            github.rest.issues.update({
              owner: owner,
              repo: name,
              issue_number: result.search.edges[0].node.number,
              body: issue_body
            })
          }
