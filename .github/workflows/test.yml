name: Test

on:
  push:
    branches: [main, bisect]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --extra test

      - name: Run tests with pytest
        run: |
          uv run pytest tests/ -v --tb=short

      - name: Test CLI commands
        run: |
          # Test the CLI entry points work
          uv run capture-versions --help || echo "capture-versions help not available (expected)"

          # Test module execution
          TRACK_PACKAGES="pytest" uv run python -m issue_from_pytest_log_action.capture_versions

          # Test simple-bisect help
          uv run python -m issue_from_pytest_log_action.simple_bisect --help

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Run ruff
        run: |
          uv run ruff check .

      - name: Run mypy
        run: |
          uv run mypy src/issue_from_pytest_log_action/

  test-action:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Action Installation
        run: |
          python -m pip install .

      - name: Test capture-versions CLI
        run: |
          TRACK_PACKAGES="pytest,setuptools" python -m issue_from_pytest_log_action.capture_versions
          cat captured-package-versions.json

      - name: Verify git info extraction
        run: |
          python -c "
          import json
          with open('captured-package-versions.json') as f:
              data = json.load(f)

          packages = data['packages']
          for pkg_name, pkg_info in packages.items():
              if isinstance(pkg_info, dict) and 'git_info' in pkg_info:
                  print(f'{pkg_name}: {pkg_info[\"version\"]} with git_info: {pkg_info[\"git_info\"]}')
              else:
                  print(f'{pkg_name}: {pkg_info} (simple format)')
          "
